// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


const (
	KeyHello = "hello"
)


type helloArgs struct {
    void unsafe.Pointer

}

/*var (
    helloArgs = helloArgs{}

)*/







func Hello(grid, block cuda.Dim3, void unsafe.Pointer) error {
	err := autoloadLib_hello()
	if err != nil {
		return err
	}
	kern, err := getKernel("hello", "Hello")
	if err != nil {
		return err
	}
	params := helloArgs{
	    void: void,
	
	}
	return kern.Launch(grid, block, unsafe.Pointer(&params.void))
}

func HelloEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, void unsafe.Pointer) error {
	err := autoloadLib_hello()
	if err != nil {
		return err
	}
	kern, err := getKernel("hello", "Hello")
	if err != nil {
		return err
	}
	params := helloArgs{
	    void: void,
	
	}
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.void))
}



var loaded_hello = false


var pathToCompile_hello = "/d/hpc/home/urosl/ps/PS-2024/predavanja/20-cuda/koda/go/hello.cu"
func autoloadLib_hello() error {
	var code []byte
	if loaded_hello {
		return nil
	}
	code, err := compileFile(pathToCompile_hello)
	if err != nil {
		return err
	}
	err = InitLibrary([]byte(code), "hello")
	if err != nil {
		return err
	}
	loaded_hello = true
	return nil
}

