// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __pozdrav_gpe_useless_var__ unsafe.Pointer = nil

const (
	KeyPozdrav_gpe = "pozdrav_gpe"
)


type helloArgs struct {

}

/*var (
    helloArgs = helloArgs{}

)*/







func Hello(grid, block cuda.Dim3, ) error {
	err := autoloadLib_pozdrav_gpe()
	if err != nil {
		return err
	}
	kern, err := getKernel("pozdrav_gpe", "Hello")
	if err != nil {
		return err
	}
	
	return kern.Launch(grid, block, )
}

func HelloEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, ) error {
	err := autoloadLib_pozdrav_gpe()
	if err != nil {
		return err
	}
	kern, err := getKernel("pozdrav_gpe", "Hello")
	if err != nil {
		return err
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, )
}



var loaded_pozdrav_gpe = false


func autoloadLib_pozdrav_gpe() error {
	if loaded_pozdrav_gpe {
		return nil
	}
	err := InitLibrary([]byte(Pozdrav_gpe_ptxCode), "pozdrav_gpe")
	if err != nil {
		return err
	}
	loaded_pozdrav_gpe = true
	return nil
}

const Pozdrav_gpe_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	Hello
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.global .align 1 .b8 $str[26] = {72, 101, 108, 108, 111, 32, 102, 114, 111, 109, 32, 116, 104, 114, 101, 97, 100, 32, 37, 100, 46, 37, 100, 33, 10};

.visible .entry Hello()
{
	.local .align 8 .b8 	__local_depot0[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<5>;


	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	add.u64 	%rd1, %SP, 0;
	add.u64 	%rd2, %SPL, 0;
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	st.local.v2.u32 	[%rd2], {%r2, %r1};
	mov.u64 	%rd3, $str;
	cvta.global.u64 	%rd4, %rd3;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd4;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd1;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r3, [retval0+0];
	} // callseq 0
	ret;

}

`
