// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __razdalja_2_useless_var__ unsafe.Pointer = nil

const (
	KeyRazdalja_2 = "razdalja_2"
)


type vectordistance2Args struct {
    c uintptr
    a uintptr
    b uintptr
    len int32

}

/*var (
    vectordistance2Args = vectordistance2Args{}

)*/







func VectorDistance2(grid, block cuda.Dim3, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_2()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_2", "vectorDistance2")
	if err != nil {
		return err
	}
	
	params := vectordistance2Args{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}

func VectorDistance2Ex(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_2()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_2", "vectorDistance2")
	if err != nil {
		return err
	}
	
	params := vectordistance2Args{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}



var loaded_razdalja_2 = false


func autoloadLib_razdalja_2() error {
	if loaded_razdalja_2 {
		return nil
	}
	err := InitLibrary([]byte(Razdalja_2_ptxCode), "razdalja_2")
	if err != nil {
		return err
	}
	loaded_razdalja_2 = true
	return nil
}

const Razdalja_2_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	vectorDistance2

.visible .entry vectorDistance2(
	.param .u64 vectorDistance2_param_0,
	.param .u64 vectorDistance2_param_1,
	.param .u64 vectorDistance2_param_2,
	.param .u32 vectorDistance2_param_3
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<5>;
	.reg .b32 	%r<11>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd4, [vectorDistance2_param_0];
	ld.param.u64 	%rd5, [vectorDistance2_param_1];
	ld.param.u64 	%rd6, [vectorDistance2_param_2];
	ld.param.u32 	%r6, [vectorDistance2_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r7, %ctaid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r10, %r7, %r1, %r8;
	setp.ge.s32 	%p1, %r10, %r6;
	@%p1 bra 	$L__BB0_3;

	mov.u32 	%r9, %nctaid.x;
	mul.lo.s32 	%r3, %r9, %r1;
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd4;

$L__BB0_2:
	mul.wide.s32 	%rd7, %r10, 4;
	add.s64 	%rd8, %rd1, %rd7;
	add.s64 	%rd9, %rd2, %rd7;
	ld.global.nc.f32 	%f1, [%rd9];
	ld.global.nc.f32 	%f2, [%rd8];
	sub.f32 	%f3, %f2, %f1;
	mul.f32 	%f4, %f3, %f3;
	add.s64 	%rd10, %rd3, %rd7;
	st.global.f32 	[%rd10], %f4;
	add.s32 	%r10, %r10, %r3;
	setp.lt.s32 	%p2, %r10, %r6;
	@%p2 bra 	$L__BB0_2;

$L__BB0_3:
	ret;

}

`
