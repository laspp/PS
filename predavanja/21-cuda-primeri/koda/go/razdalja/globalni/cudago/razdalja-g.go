// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __razdalja_g_useless_var__ unsafe.Pointer = nil

const (
	KeyRazdalja_g = "razdalja_g"
)


type vectordistancegArgs struct {
    c uintptr
    a uintptr
    b uintptr
    len int32

}

/*var (
    vectordistancegArgs = vectordistancegArgs{}

)*/







func VectorDistanceG(grid, block cuda.Dim3, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_g()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_g", "vectorDistanceG")
	if err != nil {
		return err
	}
	
	params := vectordistancegArgs{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}

func VectorDistanceGEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_g()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_g", "vectorDistanceG")
	if err != nil {
		return err
	}
	
	params := vectordistancegArgs{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}



var loaded_razdalja_g = false


var pathToCompile_razdalja_g = "razdalja-g.cu"
func autoloadLib_razdalja_g() error {
	var code []byte
	if loaded_razdalja_g {
		return nil
	}
	code, err := compileFile(pathToCompile_razdalja_g)
	if err != nil {
		return err
	}
	err = InitLibrary([]byte(code), "razdalja_g")
	if err != nil {
		return err
	}
	loaded_razdalja_g = true
	return nil
}

