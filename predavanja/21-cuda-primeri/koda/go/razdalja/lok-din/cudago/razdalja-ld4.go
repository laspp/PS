// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __razdalja_ld4_useless_var__ unsafe.Pointer = nil

const (
	KeyRazdalja_ld4 = "razdalja_ld4"
)


type vectordistanceld4Args struct {
    p uintptr
    a uintptr
    b uintptr
    len int32

}

/*var (
    vectordistanceld4Args = vectordistanceld4Args{}

)*/







func VectorDistanceLD4(grid, block cuda.Dim3, p uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_ld4()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_ld4", "vectorDistanceLD4")
	if err != nil {
		return err
	}
	
	params := vectordistanceld4Args{
	    p: p,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.p), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}

func VectorDistanceLD4Ex(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, p uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razdalja_ld4()
	if err != nil {
		return err
	}
	kern, err := getKernel("razdalja_ld4", "vectorDistanceLD4")
	if err != nil {
		return err
	}
	
	params := vectordistanceld4Args{
	    p: p,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.p), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}



var loaded_razdalja_ld4 = false


func autoloadLib_razdalja_ld4() error {
	if loaded_razdalja_ld4 {
		return nil
	}
	err := InitLibrary([]byte(Razdalja_ld4_ptxCode), "razdalja_ld4")
	if err != nil {
		return err
	}
	loaded_razdalja_ld4 = true
	return nil
}

const Razdalja_ld4_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	vectorDistanceLD4
.extern .shared .align 16 .b8 part[];

.visible .entry vectorDistanceLD4(
	.param .u64 vectorDistanceLD4_param_0,
	.param .u64 vectorDistanceLD4_param_1,
	.param .u64 vectorDistanceLD4_param_2,
	.param .u32 vectorDistanceLD4_param_3
)
{
	.reg .pred 	%p<10>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<23>;
	.reg .b64 	%rd<21>;


	ld.param.u64 	%rd4, [vectorDistanceLD4_param_0];
	ld.param.u64 	%rd5, [vectorDistanceLD4_param_1];
	ld.param.u64 	%rd6, [vectorDistanceLD4_param_2];
	ld.param.u32 	%r14, [vectorDistanceLD4_param_3];
	mov.u32 	%r1, %tid.x;
	mul.wide.u32 	%rd7, %r1, 4;
	mov.u64 	%rd8, part;
	add.s64 	%rd1, %rd8, %rd7;
	mov.u32 	%r15, 0;
	st.shared.u32 	[%rd1], %r15;
	mov.u32 	%r2, %ntid.x;
	mov.u32 	%r3, %ctaid.x;
	mad.lo.s32 	%r19, %r3, %r2, %r1;
	setp.ge.s32 	%p1, %r19, %r14;
	@%p1 bra 	$L__BB0_4;

	mov.u32 	%r16, %nctaid.x;
	mul.lo.s32 	%r5, %r16, %r2;
	cvta.to.global.u64 	%rd2, %rd5;
	cvta.to.global.u64 	%rd3, %rd6;
	mov.f32 	%f14, 0f00000000;

$L__BB0_2:
	mul.wide.s32 	%rd9, %r19, 4;
	add.s64 	%rd10, %rd2, %rd9;
	add.s64 	%rd11, %rd3, %rd9;
	ld.global.nc.f32 	%f4, [%rd11];
	ld.global.nc.f32 	%f5, [%rd10];
	sub.f32 	%f6, %f5, %f4;
	fma.rn.f32 	%f14, %f6, %f6, %f14;
	add.s32 	%r19, %r19, %r5;
	setp.lt.s32 	%p2, %r19, %r14;
	@%p2 bra 	$L__BB0_2;

	st.shared.f32 	[%rd1], %f14;

$L__BB0_4:
	bar.sync 	0;
	shr.u32 	%r22, %r2, 1;
	setp.lt.u32 	%p3, %r2, 66;
	@%p3 bra 	$L__BB0_9;

	mov.u32 	%r20, %r22;

$L__BB0_6:
	setp.ge.u32 	%p4, %r1, %r20;
	@%p4 bra 	$L__BB0_8;

	add.s32 	%r17, %r20, %r1;
	mul.wide.u32 	%rd12, %r17, 4;
	add.s64 	%rd14, %rd8, %rd12;
	ld.shared.f32 	%f7, [%rd1];
	ld.shared.f32 	%f8, [%rd14];
	add.f32 	%f9, %f8, %f7;
	st.shared.f32 	[%rd1], %f9;

$L__BB0_8:
	bar.sync 	0;
	shr.u32 	%r22, %r20, 1;
	setp.gt.u32 	%p5, %r20, 65;
	mov.u32 	%r20, %r22;
	@%p5 bra 	$L__BB0_6;

$L__BB0_9:
	setp.eq.s32 	%p6, %r22, 0;
	@%p6 bra 	$L__BB0_13;

$L__BB0_10:
	setp.ge.u32 	%p7, %r1, %r22;
	@%p7 bra 	$L__BB0_12;

	add.s32 	%r18, %r22, %r1;
	mul.wide.u32 	%rd15, %r18, 4;
	add.s64 	%rd17, %rd8, %rd15;
	ld.shared.f32 	%f10, [%rd1];
	ld.shared.f32 	%f11, [%rd17];
	add.f32 	%f12, %f11, %f10;
	st.shared.f32 	[%rd1], %f12;

$L__BB0_12:
	bar.warp.sync 	-1;
	shr.u32 	%r22, %r22, 1;
	setp.ne.s32 	%p8, %r22, 0;
	@%p8 bra 	$L__BB0_10;

$L__BB0_13:
	setp.ne.s32 	%p9, %r1, 0;
	@%p9 bra 	$L__BB0_15;

	ld.shared.f32 	%f13, [part];
	cvta.to.global.u64 	%rd18, %rd4;
	mul.wide.u32 	%rd19, %r3, 4;
	add.s64 	%rd20, %rd18, %rd19;
	st.global.f32 	[%rd20], %f13;

$L__BB0_15:
	ret;

}

`
