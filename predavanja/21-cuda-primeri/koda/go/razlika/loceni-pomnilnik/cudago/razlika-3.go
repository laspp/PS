// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __razlika_3_useless_var__ unsafe.Pointer = nil

const (
	KeyRazlika_3 = "razlika_3"
)


type vectorsubtract3Args struct {
    c uintptr
    a uintptr
    b uintptr
    len int32

}

/*var (
    vectorsubtract3Args = vectorsubtract3Args{}

)*/







func VectorSubtract3(grid, block cuda.Dim3, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razlika_3()
	if err != nil {
		return err
	}
	kern, err := getKernel("razlika_3", "vectorSubtract3")
	if err != nil {
		return err
	}
	
	params := vectorsubtract3Args{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}

func VectorSubtract3Ex(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_razlika_3()
	if err != nil {
		return err
	}
	kern, err := getKernel("razlika_3", "vectorSubtract3")
	if err != nil {
		return err
	}
	
	params := vectorsubtract3Args{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}



var loaded_razlika_3 = false


func autoloadLib_razlika_3() error {
	if loaded_razlika_3 {
		return nil
	}
	err := InitLibrary([]byte(Razlika_3_ptxCode), "razlika_3")
	if err != nil {
		return err
	}
	loaded_razlika_3 = true
	return nil
}

const Razlika_3_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	vectorSubtract3

.visible .entry vectorSubtract3(
	.param .u64 vectorSubtract3_param_0,
	.param .u64 vectorSubtract3_param_1,
	.param .u64 vectorSubtract3_param_2,
	.param .u32 vectorSubtract3_param_3
)
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<4>;
	.reg .b32 	%r<6>;
	.reg .b64 	%rd<11>;


	ld.param.u64 	%rd1, [vectorSubtract3_param_0];
	ld.param.u64 	%rd2, [vectorSubtract3_param_1];
	ld.param.u64 	%rd3, [vectorSubtract3_param_2];
	ld.param.u32 	%r2, [vectorSubtract3_param_3];
	mov.u32 	%r3, %ntid.x;
	mov.u32 	%r4, %ctaid.x;
	mov.u32 	%r5, %tid.x;
	mad.lo.s32 	%r1, %r3, %r4, %r5;
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	$L__BB0_2;

	cvta.to.global.u64 	%rd4, %rd2;
	mul.wide.s32 	%rd5, %r1, 4;
	add.s64 	%rd6, %rd4, %rd5;
	cvta.to.global.u64 	%rd7, %rd3;
	add.s64 	%rd8, %rd7, %rd5;
	ld.global.nc.f32 	%f1, [%rd8];
	ld.global.nc.f32 	%f2, [%rd6];
	sub.f32 	%f3, %f2, %f1;
	cvta.to.global.u64 	%rd9, %rd1;
	add.s64 	%rd10, %rd9, %rd5;
	st.global.f32 	[%rd10], %f3;

$L__BB0_2:
	ret;

}

`
