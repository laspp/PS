// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


//here just to force usage of unsafe package
var __urejanje_ov_useless_var__ unsafe.Pointer = nil

const (
	KeyUrejanje_ov = "urejanje_ov"
)


type bitonicsortovArgs struct {
    a uintptr
    len int32
    k int32
    j int32

}

/*var (
    bitonicsortovArgs = bitonicsortovArgs{}

)*/







func BitonicSortOV(grid, block cuda.Dim3, a uintptr, len int32, k int32, j int32) error {
	err := autoloadLib_urejanje_ov()
	if err != nil {
		return err
	}
	kern, err := getKernel("urejanje_ov", "bitonicSortOV")
	if err != nil {
		return err
	}
	
	params := bitonicsortovArgs{
	    a: a,
	    len: len,
	    k: k,
	    j: j,
	
	}
	
	return kern.Launch(grid, block, unsafe.Pointer(&params.a), unsafe.Pointer(&params.len), unsafe.Pointer(&params.k), unsafe.Pointer(&params.j))
}

func BitonicSortOVEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, a uintptr, len int32, k int32, j int32) error {
	err := autoloadLib_urejanje_ov()
	if err != nil {
		return err
	}
	kern, err := getKernel("urejanje_ov", "bitonicSortOV")
	if err != nil {
		return err
	}
	
	params := bitonicsortovArgs{
	    a: a,
	    len: len,
	    k: k,
	    j: j,
	
	}
	
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.a), unsafe.Pointer(&params.len), unsafe.Pointer(&params.k), unsafe.Pointer(&params.j))
}



var loaded_urejanje_ov = false


func autoloadLib_urejanje_ov() error {
	if loaded_urejanje_ov {
		return nil
	}
	err := InitLibrary([]byte(Urejanje_ov_ptxCode), "urejanje_ov")
	if err != nil {
		return err
	}
	loaded_urejanje_ov = true
	return nil
}

const Urejanje_ov_ptxCode = `//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-34431801
// Cuda compilation tools, release 12.6, V12.6.20
// Based on NVVM 7.0.1
//

.version 8.5
.target sm_52
.address_size 64

	// .globl	bitonicSortOV

.visible .entry bitonicSortOV(
	.param .u64 bitonicSortOV_param_0,
	.param .u32 bitonicSortOV_param_1,
	.param .u32 bitonicSortOV_param_2,
	.param .u32 bitonicSortOV_param_3
)
{
	.reg .pred 	%p<6>;
	.reg .b32 	%r<25>;
	.reg .b64 	%rd<7>;


	ld.param.u64 	%rd4, [bitonicSortOV_param_0];
	ld.param.u32 	%r10, [bitonicSortOV_param_2];
	ld.param.u32 	%r11, [bitonicSortOV_param_3];
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r24, %r12, %r1, %r13;
	ld.param.u32 	%r14, [bitonicSortOV_param_1];
	shr.u32 	%r15, %r14, 31;
	add.s32 	%r16, %r14, %r15;
	shr.s32 	%r3, %r16, 1;
	setp.ge.s32 	%p1, %r24, %r3;
	@%p1 bra 	$L__BB0_7;

	cvta.to.global.u64 	%rd1, %rd4;
	shl.b32 	%r4, %r11, 1;
	mov.u32 	%r17, %nctaid.x;
	mul.lo.s32 	%r5, %r17, %r1;
	bra.uni 	$L__BB0_2;

$L__BB0_4:
	setp.le.s32 	%p4, %r7, %r8;
	@%p4 bra 	$L__BB0_6;
	bra.uni 	$L__BB0_5;

$L__BB0_2:
	div.s32 	%r18, %r24, %r11;
	mul.lo.s32 	%r19, %r18, %r11;
	sub.s32 	%r20, %r24, %r19;
	mad.lo.s32 	%r21, %r4, %r18, %r20;
	xor.b32  	%r22, %r21, %r11;
	and.b32  	%r23, %r21, %r10;
	setp.eq.s32 	%p2, %r23, 0;
	mul.wide.s32 	%rd5, %r21, 4;
	add.s64 	%rd2, %rd1, %rd5;
	ld.global.u32 	%r7, [%rd2];
	mul.wide.s32 	%rd6, %r22, 4;
	add.s64 	%rd3, %rd1, %rd6;
	ld.global.u32 	%r8, [%rd3];
	@%p2 bra 	$L__BB0_4;

	setp.lt.s32 	%p3, %r7, %r8;
	@%p3 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_6;

$L__BB0_5:
	st.global.u32 	[%rd2], %r8;
	st.global.u32 	[%rd3], %r7;

$L__BB0_6:
	add.s32 	%r24, %r24, %r5;
	setp.lt.s32 	%p5, %r24, %r3;
	@%p5 bra 	$L__BB0_2;

$L__BB0_7:
	ret;

}

`
