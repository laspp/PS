// Code generated by cudago. Edit at your own risk.
package cudago

import (
    "github.com/InternatBlackhole/cudago/cuda"
	"unsafe"
)


const (
	KeyVecsub = "vecsub"
)


type vectorsubtractArgs struct {
    c uintptr
    a uintptr
    b uintptr
    len int32

}

/*var (
    vectorsubtractArgs = vectorsubtractArgs{}

)*/







func VectorSubtract(grid, block cuda.Dim3, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_vecsub()
	if err != nil {
		return err
	}
	kern, err := getKernel("vecsub", "vectorSubtract")
	if err != nil {
		return err
	}
	params := vectorsubtractArgs{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	return kern.Launch(grid, block, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}

func VectorSubtractEx(grid, block cuda.Dim3, sharedMem uint64, stream *cuda.Stream, c uintptr, a uintptr, b uintptr, len int32) error {
	err := autoloadLib_vecsub()
	if err != nil {
		return err
	}
	kern, err := getKernel("vecsub", "vectorSubtract")
	if err != nil {
		return err
	}
	params := vectorsubtractArgs{
	    c: c,
	    a: a,
	    b: b,
	    len: len,
	
	}
	return kern.LaunchEx(grid, block, sharedMem, stream, unsafe.Pointer(&params.c), unsafe.Pointer(&params.a), unsafe.Pointer(&params.b), unsafe.Pointer(&params.len))
}



var loaded_vecsub = false


var pathToCompile_vecsub = "/d/hpc/home/urosl/ps/PS-2024/predavanja/21-cuda-primeri/koda/razlika/go/vecsub.cu"
func autoloadLib_vecsub() error {
	var code []byte
	if loaded_vecsub {
		return nil
	}
	code, err := compileFile(pathToCompile_vecsub)
	if err != nil {
		return err
	}
	err = InitLibrary([]byte(code), "vecsub")
	if err != nil {
		return err
	}
	loaded_vecsub = true
	return nil
}

